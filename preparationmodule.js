// Generated by CoffeeScript 2.5.1
(function() {
  var cheerio, fs, hasNoText, ignoredSubTags, isSubTagToIgnore, log, olog, ostr, pathHandler, preparationmodule, prepare, prepareAllTexts, prepareBody, prepareNode, print, readFile;

  preparationmodule = {
    name: "preparationmodule"
  };

  //###########################################################
  //region printLogFunctions
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["preparationmodule"] != null) {
      console.log("[preparationmodule]: " + arg);
    }
  };

  ostr = function(obj) {
    return JSON.stringify(obj, null, 4);
  };

  olog = function(obj) {
    return log("\n" + ostr(obj));
  };

  print = function(arg) {
    return console.log(arg);
  };

  //endregion

  //###########################################################
  cheerio = require("cheerio");

  fs = require("fs");

  //###########################################################
  pathHandler = null;

  //###########################################################
  ignoredSubTags = ["span", "a", "b", "sup", "img", "strong", "br", "script"];

  //# Probably we donot need this, as there is no content here^^

  //###########################################################
  preparationmodule.initialize = function() {
    log("preparationmodule.initialize");
    pathHandler = allModules.pathhandlermodule;
  };

  //###########################################################
  //region internalFunctions
  readFile = function(path) {
    log("readFile");
    return new Promise(function(resolve, reject) {
      var callback;
      callback = function(error, data) {
        if (error) {
          reject(error);
        } else {
          resolve(data);
        }
      };
      fs.readFile(path, 'utf8', callback);
    });
  };

  prepare = async function(filePaths) {
    var $, body, content, head, template;
    log("prepare");
    template = (await readFile(filePaths.templatePath));
    content = require(filePaths.contentPath);
    $ = cheerio.load(template);
    head = $("head");
    body = $("body");
    // olog content
    prepareBody($, body, content);
    //#Append other stuff
    head.append("{{{headInclude}}}\n");
    body.append("{{{adminPanel}}}\n");
    body.append("{{{scriptInclude}}}\n");
    fs.writeFile(filePaths.outputPath, $.html(), function() {});
  };

  prepareBody = function($, body, content) {
    log("prepareBody");
    prepareAllTexts($, body);
  };

  // prepareAllLinks($,body, content)
  // prepareAllImages($,body, content)
  // prepareAllLists($, body, content)
  prepareAllTexts = function($, body) {
    var child, children, i, len;
    log("prepareAllTexts");
    children = body.children();
    log('@Body we have ' + children.length + ' children!');
    for (i = 0, len = children.length; i < len; i++) {
      child = children[i];
      if (!($(child).is('script'))) {
        prepareNode($, child);
      }
    }
  };

  isSubTagToIgnore = function($, node) {
    var i, len, tag;
    for (i = 0, len = ignoredSubTags.length; i < len; i++) {
      tag = ignoredSubTags[i];
      if ($(node).is(tag)) {
        return true;
      }
    }
    return false;
  };

  prepareNode = function($, node, content) {
    var child, children, i, len;
    log("prepareNode");
    // if !node.html() then return
    // if hasNoText(node) then return
    log(node.tagName);
    // log node.html()
    children = node.children;
    if (!children.length) {
      log("probably we have reached a leaf :-)");
      log($(node).text());
      return;
    }
    log("@Node " + node.id + " we have " + children.length + " children!");
    for (i = 0, len = children.length; i < len; i++) {
      child = children[i];
      if (!($(child).is('script'))) {
        prepareNode($, child);
      }
    }
  };

  hasNoText = function(node) {
    var text;
    text = node.text();
    // log '_____________START'
    // log text
    if (text) {
      // log '_____________REPLACED'
      text = text.replace(/\s/g, '');
      // log text
      if (text) {
        // log ' - - - had Text'
        return false;
      }
    }
    // log ' - - - no Text'
    return true;
  };

  // checkNode = ($, node) ->
  //     #log(node.html());
  //     if hasNoText(node) then return

  //     #check next
  //     children = node.children()

  //   nonNodeElements = 0
  //   i = 0
  //   while i < children.length
  //     if isSubTagToIgnore(children[i])
  //       #console.log("!! -  We have a nonNode element here  -  !! ");
  //       nonNodeElements++
  //     else
  //       checkNode $(children[i])
  //     i++
  //   if !children.length or children.length == nonNodeElements
  //     #we have here a leave
  //     #console.log("!!!   ---   This Node either had no children at all or it only had links as children!");
  //     if !id
  //       id = idBase + idCount++
  //       node.attr 'id', id
  //     node.addClass 'editable-field'
  //     content[id] = node.html()
  //     node.html '{{{content.' + id + '}}}'
  //   return

  //endregion

  //###########################################################
  preparationmodule.execute = async function() {
    var filePathObject, filePathObjects, promises;
    log("preparationmodule.execute");
    filePathObjects = pathHandler.getFilePathObjects();
    olog(filePathObjects);
    promises = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = filePathObjects.length; i < len; i++) {
        filePathObject = filePathObjects[i];
        results.push(prepare(filePathObject));
      }
      return results;
    })();
    await Promise.all(promises);
  };

  module.exports = preparationmodule;

}).call(this);
