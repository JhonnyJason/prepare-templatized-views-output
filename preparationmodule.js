// Generated by CoffeeScript 2.5.1
(function() {
  var cheerio, decamelize, fs, hasNoText, isContentLink, log, olog, ostr, pathHandler, preparationmodule, prepare, prepareAllImages, prepareAllLinks, prepareAllLists, prepareAllTexts, prepareBody, prepareImage, prepareLinkNode, prepareList, prepareObjectList, prepareTextList, prepareTextNode, print, readFile, searchArrays;

  preparationmodule = {
    name: "preparationmodule"
  };

  //###########################################################
  //region printLogFunctions
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["preparationmodule"] != null) {
      console.log("[preparationmodule]: " + arg);
    }
  };

  ostr = function(obj) {
    return JSON.stringify(obj, null, 4);
  };

  olog = function(obj) {
    return log("\n" + ostr(obj));
  };

  print = function(arg) {
    return console.log(arg);
  };

  //endregion

  //###########################################################
  cheerio = require("cheerio");

  fs = require("fs");

  decamelize = require("decamelize");

  //###########################################################
  pathHandler = null;

  //###########################################################
  preparationmodule.initialize = function() {
    log("preparationmodule.initialize");
    pathHandler = allModules.pathhandlermodule;
  };

  //###########################################################
  //region internalFunctions
  readFile = function(path) {
    log("readFile");
    return new Promise(function(resolve, reject) {
      var callback;
      callback = function(error, data) {
        if (error) {
          reject(error);
        } else {
          resolve(data);
        }
      };
      fs.readFile(path, 'utf8', callback);
    });
  };

  prepare = async function(filePaths) {
    var $, body, content, head, template;
    log("prepare");
    log(filePaths.templatePath);
    template = (await readFile(filePaths.templatePath));
    content = require(filePaths.contentPath);
    $ = cheerio.load(template);
    head = $("head");
    body = $("body");
    prepareBody($, body, content);
    //#Append other stuff
    head.append("{{{headInclude}}}\n");
    body.append("{{{adminPanel}}}\n");
    body.append("{{{scriptInclude}}}\n");
    fs.writeFile(filePaths.outputPath, $.html(), function() {});
  };

  prepareBody = function($, cheerioBody, content) {
    log("prepareBody");
    prepareAllTexts($, cheerioBody);
    // prepareAllLinks($,cheerioBody, content)
    // prepareAllImages($,cheerioBody, content)
    prepareAllLists($, cheerioBody, content);
  };

  //###########################################################
  prepareAllLists = function($, cheerioBody, content) {
    var allListKeys, i, len, listKey;
    log("prepareAllLists");
    allListKeys = searchArrays("sharedContent", content.sharedContent);
    allListKeys = allListKeys.concat(searchArrays("content", content.content));
    for (i = 0, len = allListKeys.length; i < len; i++) {
      listKey = allListKeys[i];
      prepareList($, cheerioBody, content, listKey);
    }
  };

  searchArrays = function(prefix, obj) {
    var key, newResults, result, sub;
    log("searchArrays");
    if (typeof obj !== "object") {
      return;
    }
    result = [];
    for (key in obj) {
      sub = obj[key];
      newResults = searchArrays(prefix + "." + key, sub);
      if (!newResults) {
        continue;
      }
      if (Array.isArray(sub)) {
        newResults.push(prefix + "." + key);
      }
      result = result.concat(newResults);
    }
    return result;
  };

  prepareList = function($, cheerioBody, content, listKey) {
    var i, keyTokens, len, listObject, token;
    log("prepareList");
    keyTokens = listKey.split(".");
    token = keyTokens.shift();
    listObject = content[token];
    for (i = 0, len = keyTokens.length; i < len; i++) {
      token = keyTokens[i];
      listObject = listObject[token];
    }
    if (typeof listObject[0] === "string") {
      prepareTextList($, cheerioBody, listKey);
    } else {
      prepareObjectList($, cheerioBody, listKey, listObject);
    }
  };

  prepareTextList = function($, cheerioBody, listKey) {
    var firstElement, listParent, selector;
    log("prepareTextList");
    selector = "[text-content-key='" + listKey + ".0']";
    log(selector);
    firstElement = cheerioBody.find(selector).first();
    listParent = firstElement.parent();
    listParent.attr("list-content-key", listKey);
  };

  prepareObjectList = function($, cheerioBody, listKey, listObject) {
    log("prepareObjectList");
  };

  //###########################################################
  prepareAllImages = function($, cheerioBody, content) {
    var allImages, i, image, len;
    log("prepareAllImages");
    allImages = Object.keys(content.images);
    for (i = 0, len = allImages.length; i < len; i++) {
      image = allImages[i];
      prepareImage($, cheerioBody, image);
    }
  };

  prepareImage = function($, cheerioBody, image) {
    var cheerioImage, imageId;
    log("prepareImage");
    log(image);
    imageId = decamelize(image, "-");
    log(imageId);
    cheerioImage = cheerioBody.find("#" + imageId).first();
    cheerioImage.attr("image-content-key", image);
  };

  //###########################################################
  prepareAllLinks = function($, cheerioBody) {
    var allLinks, i, len, link;
    log("prepareAllLinks");
    allLinks = cheerioBody.find("a");
    log(allLinks.length);
    for (i = 0, len = allLinks.length; i < len; i++) {
      link = allLinks[i];
      if (isContentLink($, link)) {
        prepareLinkNode($, link);
      }
    }
  };

  isContentLink = function($, link) {
    var cheerioLink, href, identifier, index;
    log("isContentLink");
    cheerioLink = $(link);
    href = cheerioLink.attr("href");
    identifier = ".ref}}}";
    index = href.lastIndexOf(identifier);
    return index === (href.length - identifier.length);
  };

  prepareLinkNode = function($, link) {
    var cheerioLink, linkContentKey;
    log("prepareLinkNode");
    cheerioLink = $(link);
    linkContentKey = cheerioLink.attr("href").replace(/{/g, "").replace(/}/g, "");
    cheerioLink.attr("link-content-key", linkContentKey);
  };

  //###########################################################
  prepareAllTexts = function($, cheerioBody) {
    var child, children, i, len;
    log("prepareAllTexts");
    children = cheerioBody.children();
    log('@Body we have ' + children.length + ' children!');
//when !($(child).is('script'))
    for (i = 0, len = children.length; i < len; i++) {
      child = children[i];
      prepareTextNode($, child);
    }
  };

  prepareTextNode = function($, node) {
    var cheerioNode, child, children, i, len, textContentKey;
    log("prepareNode");
    cheerioNode = $(node);
    if (hasNoText(cheerioNode)) {
      return;
    }
    children = cheerioNode.children();
    if (children.length === 0) {
      // log "-----"
      // log "found leaf at " + node.tagName + " " + id
      // log cheerioNode.text()
      textContentKey = cheerioNode.text().replace(/{/g, "").replace(/}/g, "").replace(/\s/g, "");
      // log textContentKey
      cheerioNode.attr("text-content-key", textContentKey);
      return;
    }
//when !($(child).is('script'))
    for (i = 0, len = children.length; i < len; i++) {
      child = children[i];
      prepareTextNode($, child);
    }
  };

  hasNoText = function(cheerioNode) {
    var text;
    text = cheerioNode.text();
    if (text) {
      text = text.replace(/\s/g, '');
    }
    if (text) {
      return false;
    }
    return true;
  };

  // checkNode = ($, node) ->
  //     #log(node.html());
  //     if hasNoText(node) then return

  //     #check next
  //     children = node.children()

  //   nonNodeElements = 0
  //   i = 0
  //   while i < children.length
  //     if isSubTagToIgnore(children[i])
  //       #console.log("!! -  We have a nonNode element here  -  !! ");
  //       nonNodeElements++
  //     else
  //       checkNode $(children[i])
  //     i++
  //   if !children.length or children.length == nonNodeElements
  //     #we have here a leave
  //     #console.log("!!!   ---   This Node either had no children at all or it only had links as children!");
  //     if !id
  //       id = idBase + idCount++
  //       node.attr 'id', id
  //     node.addClass 'editable-field'
  //     content[id] = node.html()
  //     node.html '{{{content.' + id + '}}}'
  //   return

  //endregion

  //###########################################################
  preparationmodule.execute = async function() {
    var filePathObjects;
    log("preparationmodule.execute");
    filePathObjects = pathHandler.getFilePathObjects();
    // olog filePathObjects
    // promises = (prepare(filePathObject) for filePathObject in filePathObjects)
    // await Promise.all(promises)
    await prepare(filePathObjects[0]);
  };

  module.exports = preparationmodule;

}).call(this);
