// Generated by CoffeeScript 2.5.1
(function() {
  var checkDirectoryExists, contentExtension, createFilePathsObject, digestContent, digestUnprepared, fs, homedir, log, olog, os, ostr, pathModule, pathhandlermodule, print, resolveHomeDir, templateExtension, templates;

  pathhandlermodule = {
    name: "pathhandlermodule"
  };

  //###########################################################
  //region logPrintFunctions
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["pathhandlermodule"] != null) {
      console.log("[pathhandlermodule]: " + arg);
    }
  };

  olog = function(o) {
    return log("\n" + ostr(o));
  };

  ostr = function(o) {
    return JSON.stringify(o, null, 4);
  };

  print = function(arg) {
    return console.log(arg);
  };

  //endregion

  //###########################################################
  //region node_modules
  fs = require("fs");

  pathModule = require("path");

  os = require("os");

  //endregion

  //###########################################################
  //region properties
  homedir = os.homedir();

  templates = {};

  templateExtension = ".mustache";

  contentExtension = ".json";

  //###########################################################
  //region exposedProperties
  pathhandlermodule.homedir = homedir; //directory

  pathhandlermodule.unpreparedPath = ""; //directory

  pathhandlermodule.contentPath = ""; //directory

  pathhandlermodule.outputPath = ""; //directory

  //endregion
  //endregion

  //###########################################################
  pathhandlermodule.initialize = function() {
    log("pathhandlermodule.initialize");
  };

  //###########################################################
  //region internalFunctions
  resolveHomeDir = function(path) {
    log("resolveHomeDir");
    if (!path) {
      return;
    }
    if (path[0] === "~") {
      path = path.replace("~", homedir);
    }
    return path;
  };

  checkDirectoryExists = function(path) {
    var err, stats;
    try {
      stats = fs.lstatSync(path);
      return stats.isDirectory();
    } catch (error) {
      err = error;
      log(err);
      return false;
    }
  };

  digestUnprepared = function() {
    var files, len;
    log("digestUnprepared");
    files = fs.readdirSync(pathhandlermodule.unpreparedPath);
    len = templateExtension.length;
    // filter out the files with extension of .mustache
    files = files.filter(function(file) {
      return file.substr(file.length - len, len) === templateExtension;
    });
    // olog files
    // get rid of extension
    files = files.map(function(file) {
      return file.substr(0, file.length - len);
    });
    // assign to templates 
    files.forEach(function(file) {
      return templates[file] = false;
    });
    olog(templates);
  };

  digestContent = function() {
    var file, files, i, len, len1;
    log("digestContent");
    files = fs.readdirSync(pathhandlermodule.contentPath);
    len = contentExtension.length;
    // filter out the files with extension of .json
    files = files.filter(function(file) {
      return file.substr(file.length - len, len) === contentExtension;
    });
    files = files.map(function(file) {
      return file.substr(0, file.length - len);
    });
    olog(files);
    for (i = 0, len1 = files.length; i < len1; i++) {
      file = files[i];
      if (templates[file] != null) {
        templates[file] = true;
      }
    }
    olog(templates);
  };

  createFilePathsObject = function(filename) {
    var contentPath, outputPath, templatePath;
    log("createUnpreparedPair");
    templatePath = pathModule.resolve(pathhandlermodule.unpreparedPath, filename + templateExtension);
    contentPath = pathModule.resolve(pathhandlermodule.contentPath, filename + contentExtension);
    outputPath = pathModule.resolve(pathhandlermodule.outputPath, filename + templateExtension);
    return {templatePath, contentPath, outputPath};
  };

  //endregion

  //###########################################################
  //region exposedFunctions
  pathhandlermodule.preparePathsOfUnprepared = async function(unpreparedPath) {
    var exists;
    log("pathhandlermodule.preparePathsOfUnprepared");
    log(unpreparedPath);
    if (!unpreparedPath) {
      throw new Error("Error, path to unprepared was empty!");
    }
    unpreparedPath = resolveHomeDir(unpreparedPath);
    if (pathModule.isAbsolute(unpreparedPath)) {
      pathhandlermodule.unpreparedPath = unpreparedPath;
    } else {
      pathhandlermodule.unpreparedPath = pathModule.resolve(process.cwd(), unpreparedPath);
    }
    log("our unpreparedPath is: " + pathhandlermodule.unpreparedPath);
    exists = (await checkDirectoryExists(pathhandlermodule.unpreparedPath));
    if (!exists) {
      throw new Error("No directory exists, for the provided unprepared path!");
    }
    await digestUnprepared();
  };

  pathhandlermodule.preparePathsOfContent = async function(contentPath) {
    var exists;
    log("pathhandlermodule.preparePathsOfContent");
    log(contentPath);
    if (!contentPath) {
      throw new Error("Error, path to content was empty!");
    }
    contentPath = resolveHomeDir(contentPath);
    if (pathModule.isAbsolute(contentPath)) {
      pathhandlermodule.contentPath = contentPath;
    } else {
      pathhandlermodule.contentPath = pathModule.resolve(process.cwd(), contentPath);
    }
    log("our contentPath is: " + pathhandlermodule.contentPath);
    exists = (await checkDirectoryExists(pathhandlermodule.contentPath));
    if (!exists) {
      throw new Error("No directory exists, for the provided content path!");
    }
    await digestContent();
  };

  pathhandlermodule.checkOutputPath = async function(outputPath) {
    var exists;
    log("pathhandlermodule.preparePathsOfOutput");
    log(outputPath);
    if (!outputPath) {
      throw "Error, path to output was empty!";
    }
    outputPath = resolveHomeDir(outputPath);
    if (pathModule.isAbsolute(outputPath)) {
      pathhandlermodule.outputPath = outputPath;
    } else {
      pathhandlermodule.outputPath = pathModule.resolve(process.cwd(), outputPath);
    }
    log("our outputPath is: " + pathhandlermodule.outputPath);
    exists = (await checkDirectoryExists(pathhandlermodule.outputPath));
    if (!exists) {
      throw new Error("No directory exists, for the provided output path!");
    }
  };

  //###########################################################
  pathhandlermodule.getFilePathObjects = function() {
    var exists, file, result;
    log("pathhandlermodule.getUnpreparedMustaches");
    result = [];
    for (file in templates) {
      exists = templates[file];
      if (exists) {
        result.push(createFilePathsObject(file));
      }
    }
    return result;
  };

  //endregion
  module.exports = pathhandlermodule;

}).call(this);
